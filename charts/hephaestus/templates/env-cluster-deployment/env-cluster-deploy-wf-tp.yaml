apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: env-cluster-deploy-wf-tp
spec:
  entrypoint: env-cluster-deployment
  podGC:
    strategy: OnWorkflowSuccess
  arguments:
    parameters:
      - name: env_cluster_name
        value: dev
      - name: sp-secret-name
        value: {{first .Values.servicePrincipalEnums }}
        enum:
{{ .Values.servicePrincipalEnums | toYaml | indent 10 }}
  templates:
  - name: env-cluster-deployment
    inputs:
      parameters:
        - name: env_cluster_name
          default: "{{`{{workflow.parameters.env_cluster_name}}`}}"
        - name: sp-secret-name
          default: "{{`{{workflow.parameters.sp-secret-name}}`}}"
        - name: server-url
          default: "{{ .Values.serverURL }}"
        - name: sc-name
          default: "{{ .Values.serviceClusterName }}"
    steps:
      - - name: terraform-prep
          templateRef:
            name: terraform-prep-tp
            template: terraform-prep-steps
          arguments:
            parameters:
              - name: service_cluster_name
                value: "{{`{{inputs.parameters.sc-name}}`}}"
              - name: sp-secret-name
                value: "{{`{{inputs.parameters.sp-secret-name}}`}}"
              - name: resource_group_name
                value: env-aks-infrastructure-{{`{{inputs.parameters.sc-name}}`}}
              - name: storage_account_name
                value: envtfstate{{`{{inputs.parameters.sc-name}}{{inputs.parameters.env_cluster_name}}`}}

      - - name: terraform-env
          templateRef:
            name: terraform-env-wf-tp
            template: terraform-workflow
          arguments:
            parameters:
              - name: service_cluster_name
                value: "{{`{{inputs.parameters.sc-name}}`}}"
              - name: env_cluster_name
                value: "{{`{{inputs.parameters.env_cluster_name}}`}}"
              - name: sp-secret-name
                value: "{{`{{inputs.parameters.sp-secret-name}}`}}"
              - name: resource_group_name
                value: env-aks-infrastructure-{{`{{inputs.parameters.sc-name}}`}}
              - name: storage_account_name
                value: envtfstate{{`{{inputs.parameters.sc-name}}{{inputs.parameters.env_cluster_name}}`}}
            artifacts:
              - name: repo
                from: "{{`{{steps.terraform-prep.outputs.artifacts.repo}}`}}"

      # Adds the new env cluster to the existing argocd in the deploying service cluster.
      - - name: argocd-add-cluster
          templateRef:
            name: argocd-vault-admin
            template: argocd-base
          arguments:
            artifacts:
            - name: kube-config
              from: '{{`{{steps.terraform-env.outputs.artifacts.kube-config}}`}}'
            parameters:
            - name: server-url
              value: '{{`{{inputs.parameters.server-url}}`}}'
            - name: script
              value: |
                argocd cluster add {{`{{steps.terraform-env.outputs.parameters.cluster_name}}`}};

      #     # Creates a project to house all the apps that belongs to a given env.
      #   - name: argocd-create-proj
      #     templateRef:
      #       name: argocd-vault-admin
      #       template: argocd-base
      #     arguments:
      #       artifacts:
      #       - name: kube-config
      #         from: '{{`{{steps.terraform-env.outputs.artifacts.kube-config}}`}}'
      #       parameters:
      #       - name: server-url
      #         value: '{{`{{steps.get-server-url.outputs.result}}`}}'
      #       - name: script
      #         value: |
      #           argocd proj create {{`{{inputs.parameters.env_cluster_name}} -d https://{{steps.terraform-env.outputs.parameters.cluster_fqdn}}`}}:443,* -d https://kubernetes.default.svc,argocd -s git@github.com:Open-Olympus-Project/* --upsert

      #   - name: utility-append-env-file
      #     templateRef:
      #       name: utility-append-file
      #       template: append-file
      #     arguments:
      #       parameters:
      #       - name: append-string
      #         value: |
      #           fqdn_vault={{`{{steps.get-vault-url.outputs.result}}`}}
      #           env={{`{{inputs.parameters.env_cluster_name}}`}}
      #       artifacts:
      #       - name: file2
      #         from: "{{`{{steps.terraform-env.outputs.artifacts.values}}`}}"

      # - - name: argocd-workflow
      #     templateRef:
      #       name: argocd-workflow-template
      #       template: argocd-workflow
      #     arguments:
      #       artifacts:
      #         - name: kube-config
      #           from: "{{`{{steps.terraform-env.outputs.artifacts.kube-config}}`}}"
      #         - name: values
      #           from: "{{`{{steps.utility-append-env-file.outputs.artifacts.combined-file}}`}}"
      #       parameters:
      #         - name: server-url
      #           value: "{{`{{steps.get-server-url.outputs.result}}`}}"
      #         - name: context
      #           value: "{{`{{item.context}}`}}"
      #         - name: service
      #           value: "{{`{{item.service}}-{{inputs.parameters.env_cluster_name}}`}}"
      #         - name: namespace
      #           value: "{{`{{item.namespace}}`}}"
      #         - name: valuesScript
      #           value: "{{`{{item.valuesScript}}`}}"
      #         - name: repo
      #           value: "{{`{{item.repo}}`}}"
      #         - name: dest
      #           value: "https://{{`{{steps.terraform-env.outputs.parameters.cluster_fqdn}}`}}:443"
      #         - name: project
      #           value: "{{`{{inputs.parameters.env_cluster_name}}`}}"
      #         - name: auth-method
      #           value: vault
      #         - name: values-tp-file-name
      #           value: "{{`{{item.values-tp-file-name}}`}}"
      #     withItems:
      #       - {
      #           context: "tooling",
      #           service: "prometheus",
      #           repo: "git@github.com:Open-Olympus-Project/prometheus.git",
      #           namespace: "monitoring",
      #           valuesScript: "--values-literal-file ../../../value.yaml",
      #           values-tp-file-name: "env-values",
      #         }
      #       - {
      #           context: "tooling",
      #           service: "thanos",
      #           repo: "git@github.com:Open-Olympus-Project/thanos.git",
      #           namespace: "monitoring",
      #           valuesScript: "--values-literal-file ../../../value.yaml",
      #           values-tp-file-name: "env-values",
      #         }
      #       - {
      #           context: "tooling",
      #           service: "loki",
      #           repo: "git@github.com:Open-Olympus-Project/loki.git",
      #           namespace: "monitoring-loki",
      #           valuesScript: "--values-literal-file ../../../value.yaml",
      #           values-tp-file-name: "env-values",
      #         }
      #       - {
      #           context: "tooling",
      #           service: "argo-wf",
      #           repo: "git@github.com:Open-Olympus-Project/argo-wf.git",
      #           namespace: "argo",
      #           valuesScript: "--values-literal-file ../../../value.yaml",
      #           values-tp-file-name: "values-template",
      #         }
      #       - {
      #           context: "tooling",
      #           service: "jaeger-operator",
      #           repo: "git@github.com:Open-Olympus-Project/jaeger-operator.git",
      #           namespace: "monitoring",
      #           valuesScript: "--values-literal-file ../../../value.yaml",
      #           values-tp-file-name: "env-values",
      #         }
      #       - {
      #           context: "tooling",
      #           service: "vault",
      #           repo: "git@github.com:Open-Olympus-Project/vault.git",
      #           namespace: "vault",
      #           valuesScript: "--values-literal-file ../../../value.yaml",
      #           values-tp-file-name: "env-values",
      #         }
      #       - {
      #           context: "k8s",
      #           service: "ingress-nginx",
      #           namespace: "ingress-nginx",
      #           repo: "git@github.com:Open-Olympus-Project/k8s-ingress-nginx.git",
      #           valuesScript: "--values-literal-file ../../../value.yaml",
      #           values-tp-file-name: "values-template",
      #         }
      #       - {
      #           context: "k8s",
      #           service: "cert-manager",
      #           namespace: "cert-manager",
      #           repo: "git@github.com:Open-Olympus-Project/k8s-certmanager.git",
      #           valuesScript: "",
      #           values-tp-file-name: "values-template",
      #         }

      #   - name: argocd-add-directory
      #     templateRef:
      #       name: argocd-vault-admin
      #       template: argocd-base
      #     arguments:
      #       parameters:
      #       - name: server-url
      #         value: "{{`{{steps.get-server-url.outputs.result}}`}}"
      #       - name: script
      #         value: >
      #             argocd app create {{`{{item.context}}-{{item.service}}-{{inputs.parameters.env_cluster_name}} --repo {{item.repo}} --path {{item.path}} --dest-server https://{{steps.terraform-env.outputs.parameters.cluster_fqdn}}:443 --sync-option CreateNamespace=true --directory-recurse --upsert  --project {{inputs.parameters.env_cluster_name}} --dest-namespace {{item.namespace}}`}}
      #     withItems:
      #       - {
      #           context: "k8s",
      #           service: "cert-manager-clusterissuer",
      #           repo: "git@github.com:Open-Olympus-Project/k8s-certmanager.git",
      #           namespace: "cert-manager",
      #           path: "./cert-manager/"
      #         }

      # - - name: argocd-sync-apps
      #     templateRef:
      #       name: argocd-vault-admin
      #       template: argocd-base
      #     arguments:
      #       parameters:
      #         - name: server-url
      #           value: "{{`{{steps.get-server-url.outputs.result}}`}}"
      #         - name: script
      #           value: >
      #             argocd app sync {{`{{item}}`}} --async;
      #     withItems:
      #       - vault-{{`{{inputs.parameters.env_cluster_name}}`}}
      #       - prometheus-{{`{{inputs.parameters.env_cluster_name}}`}}
      #       - thanos-{{`{{inputs.parameters.env_cluster_name}}`}}
      #       - loki-{{`{{inputs.parameters.env_cluster_name}}`}}
      #       - argo-wf-{{`{{inputs.parameters.env_cluster_name}}`}}
      #       - jaeger-{{`{{inputs.parameters.env_cluster_name}}`}}
      #       - k8s-ingress-nginx-{{`{{inputs.parameters.env_cluster_name}}`}}
      #       - k8s-cert-manager-{{`{{inputs.parameters.env_cluster_name}}`}}
      #       - k8s-cert-manager-clusterissuer-{{`{{inputs.parameters.env_cluster_name}}`}}

      # - - name: vault-setup
      #     templateRef:
      #       name: vault-env-wf-tp
      #       template: vault-workflow
      #     arguments:
      #       artifacts:
      #         - name: kube-config
      #           from: "{{`{{steps.terraform-env.outputs.artifacts.kube-config}}`}}"
      #       parameters:
      #         - name: env_cluster_name
      #           value: '{{`{{inputs.parameters.env_cluster_name}}`}}'
      #         - name: server-url
      #           value: '{{`{{steps.get-server-url.outputs.result}}`}}'
      #         - name: vault-url
      #           value: '{{`{{steps.get-vault-url.outputs.result}}`}}'

      #   - name: argocd-add-sidecar-to-query
      #     templateRef:
      #       name: append-application-value-tp
      #       template: append-application-value
      #     arguments:
      #       parameters:
      #         - name: server-url
      #           value: "{{`{{steps.get-server-url.outputs.result}}`}}"
      #         - name: script
      #           value: |
      #             argocd app get thanos -o yaml | yq e .spec.source.helm.values - > tmp.yaml;
      #             yq eval -i '.querytls.stores += "{{`{{steps.terraform-env.outputs.parameters.fqdn}}`}}:443"' tmp.yaml
      #             argocd app set thanos --values-literal-file tmp.yaml;
      #             argocd app sync thanos;

      #   - name: argocd-add-loki-to-grafana
      #     templateRef:
      #       name: append-application-value-tp
      #       template: append-application-value
      #     arguments:
      #       parameters:
      #         - name: server-url
      #           value: "{{`{{steps.get-server-url.outputs.result}}`}}"
      #         - name: script
      #           value: |
      #             argocd app get grafana -o yaml | yq e .spec.source.helm.values - > tmp.yaml;
      #             echo -n "
      #                   name: loki-{{`{{inputs.parameters.env_cluster_name}}`}}
      #                   type: loki
      #                   url: https://{{`{{steps.terraform-env.outputs.parameters.fqdn}}`}}/loki
      #                   access: proxy
      #                   isDefault: false
      #                   jsonData:
      #                     timeInterval: '1m'" > datasourceSnippet.yaml
      #             snippet=$(cat datasourceSnippet.yaml) yq e -i '.datasources."datasources.yaml".datasources |= . + [env(snippet)]' tmp.yaml
      #             argocd app set grafana --values-literal-file tmp.yaml;
      #             argocd app sync grafana;
