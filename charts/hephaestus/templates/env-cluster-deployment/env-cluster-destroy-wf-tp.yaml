apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: env-cluster-destroy-wf-tp
spec:
  entrypoint: env-cluster-destroy
  podGC:
    strategy: OnWorkflowSuccess
  arguments:
    parameters:
      - name: env_cluster_name
        value: dev
      - name: sp-secret-name
        value: {{first .Values.servicePrincipalEnums }}
        enum:
{{ .Values.servicePrincipalEnums | toYaml | indent 10 }}
  templates:
  - name: env-cluster-destroy
    inputs:
      parameters:
        - name: env_cluster_name
          default: "{{`{{workflow.parameters.env_cluster_name}}`}}"
        - name: sp-secret-name
          default: "{{`{{workflow.parameters.sp-secret-name}}`}}"
        - name: resource_group_name
          value: env-aks-infrastructure-{{`{{inputs.parameters.sc-name}}`}}
        - name: storage_account_name
          value: envtfstate{{`{{inputs.parameters.sc-name}}{{inputs.parameters.env_cluster_name}}`}}
        - name: argocd-url
          default: "argocd.{{ .Values.serverURL }}"
        - name: sc-name
          default: "{{ .Values.serviceClusterName }}"
        - name: dns_zone_name
          value: "{{ .Values.serverURL }}"
    steps:
      - - name: terraform-prep
          templateRef:
            name: terraform-prep-tp
            template: terraform-prep-steps
          arguments:
            parameters:
              - name: service_cluster_name
                value: "{{`{{inputs.parameters.sc-name}}`}}"
              - name: sp-secret-name
                value: "{{`{{inputs.parameters.sp-secret-name}}`}}"
              - name: resource_group_name
                value: "{{`{{inputs.parameters.resource_group_name}}`}}"
              - name: storage_account_name
                value: "{{`{{inputs.parameters.storage_account_name}}`}}"

      - - name: terraform-env
          templateRef:
            name: terraform-destroy-env-wf-tp
            template: terraform-workflow
          arguments:
            parameters:
              - name: service_cluster_name
                value: "{{`{{inputs.parameters.sc-name}}`}}"
              - name: env_cluster_name
                value: "{{`{{inputs.parameters.env_cluster_name}}`}}"
              - name: sp-secret-name
                value: "{{`{{inputs.parameters.sp-secret-name}}`}}"
              - name: resource_group_name
                value: "{{`{{inputs.parameters.resource_group_name}}`}}"
              - name: storage_account_name
                value: "{{`{{inputs.parameters.storage_account_name}}`}}"
              - name: dns_zone_name
                value: "{{`{{inputs.parameters.dns_zone_name}}`}}"
            artifacts:
              - name: repo
                from: "{{`{{steps.terraform-prep.outputs.artifacts.repo}}`}}"

      - - name: infrastructure-storage-delete
          templateRef:
            name:  az-base-template
            template:  az-base
          arguments:
            parameters:
            - name: script
              value: |
                if [ ! -z $(az storage account check-name -n {{`{{inputs.parameters.storage_account_name}}`}} --query "reason") ]
                then
                  echo "{{`{{inputs.parameters.storage_account_name}}`}} exists"

                  echo "Deleting {{`{{inputs.parameters.storage_account_name}}`}}"
                  az storage account delete -g {{`{{inputs.parameters.resource_group_name}}`}} -n {{`{{inputs.parameters.storage_account_name}}`}} -y
                else
                  echo "{{`{{inputs.parameters.storage_account_name}}`}} does not exist.."
                fi
            - name: sp-secret-name
              value: '{{`{{inputs.parameters.sp-secret-name}}`}}'
